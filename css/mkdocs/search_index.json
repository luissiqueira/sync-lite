{
    "docs": [
        {
            "location": "/", 
            "text": "Android SyncLite\n\n\nAndroid SyncLite \u00e9 uma biblioteca para facilitar a sincroniza\u00e7\u00e3o de dados utilizando um protocolo especificado a seguir para envio e recebimento dos dados.\n\n\nDefinindo entidades\n\n\nPara que uma entidade possa ser sincronizavel se faz necess\u00e1rio que seja criado uma subclasse de BaseModelSync como no exemplo a seguir:\n\n\npackage br.com.myapp.models;\n\nimport br.com.roove.synclite.models.BaseModelSync;\nimport br.com.roove.synclite.annotation.SyncLiteField;\n\npublic class Book extends BaseModelSync {\n\n  @SyncLiteField(columnName=\n_id\n)\n  Long id;\n\n  @SyncLiteField(serializerName=\ncreator\n)\n  String author;\n\n  @SyncLiteField()\n  String title;\n\n  @SyncLiteField()\n  String isbn;\n\n  // getter's e setter's\n\n}\n\n\n\n\nApenas os atributos com a anota\u00e7\u00e3o @SyncLiteField ser\u00e3o consideradas para a sincroniza\u00e7\u00e3o e persist\u00eancia.\n\n\nO Atributo \ncolumnName\n da anota\u00e7\u00e3o deve ser usado para alterar o valor que ser\u00e1 gravado no storage local. Default: Nome do atributo.\n\n\nO Atributo \nserializerName\n da anota\u00e7\u00e3o deve ser usado para alterar o valor que ser\u00e1 considerado nos servi\u00e7os de sincroniza\u00e7\u00e3o. Default: Nome do atributo.\n\n\nRegistrando entidades\n\n\nDepois de definida uma entidade \u00e9 necess\u00e1rio registr\u00e1-la para ela de fato venha a ser enviada e recebida nas requi\u00e7\u00f5es de atualiza\u00e7\u00f5es.\n\n\npackage br.com.myapp;\n\nimport br.com.roove.synclite.sync.Synchronizer;\nimport br.com.myapp.models.Book;\n\nclass MyApplication extends android.app.Application {\n\n    @Override\n    public void onCreate() {\n        super.onCreate();\n\n        Synchronizer synchronizer = Synchronizer.getInstance();\n\n        synchronizer.registerModel(Book.class);\n\n        // Ou para registrar com um nome espec\u00edfico no serializer.\n        String serializerBookName = \nbooks\n;\n        synchronizer.registerModel(Book.class, serializerBookName);\n\n        synchronizer.start();\n    }\n\n}\n\n\n\n\nOs modelos podem ser adicionados a qualquer momento para o sincronizador, mesmo depois que j\u00e1 foi iniciada a sincroniza\u00e7\u00e3o.\n\n\nDownload\n\n\nDownload via Gradle:\n\n\ncompile 'br.com.roove.synclite:android:0.0.1'\n\n\n\n\nAndroid SyncLite requer no m\u00ednimo Android 2.3.", 
            "title": "SyncLite"
        }, 
        {
            "location": "/#android-synclite", 
            "text": "Android SyncLite \u00e9 uma biblioteca para facilitar a sincroniza\u00e7\u00e3o de dados utilizando um protocolo especificado a seguir para envio e recebimento dos dados.", 
            "title": "Android SyncLite"
        }, 
        {
            "location": "/#definindo-entidades", 
            "text": "Para que uma entidade possa ser sincronizavel se faz necess\u00e1rio que seja criado uma subclasse de BaseModelSync como no exemplo a seguir:  package br.com.myapp.models;\n\nimport br.com.roove.synclite.models.BaseModelSync;\nimport br.com.roove.synclite.annotation.SyncLiteField;\n\npublic class Book extends BaseModelSync {\n\n  @SyncLiteField(columnName= _id )\n  Long id;\n\n  @SyncLiteField(serializerName= creator )\n  String author;\n\n  @SyncLiteField()\n  String title;\n\n  @SyncLiteField()\n  String isbn;\n\n  // getter's e setter's\n\n}  Apenas os atributos com a anota\u00e7\u00e3o @SyncLiteField ser\u00e3o consideradas para a sincroniza\u00e7\u00e3o e persist\u00eancia.  O Atributo  columnName  da anota\u00e7\u00e3o deve ser usado para alterar o valor que ser\u00e1 gravado no storage local. Default: Nome do atributo.  O Atributo  serializerName  da anota\u00e7\u00e3o deve ser usado para alterar o valor que ser\u00e1 considerado nos servi\u00e7os de sincroniza\u00e7\u00e3o. Default: Nome do atributo.", 
            "title": "Definindo entidades"
        }, 
        {
            "location": "/#registrando-entidades", 
            "text": "Depois de definida uma entidade \u00e9 necess\u00e1rio registr\u00e1-la para ela de fato venha a ser enviada e recebida nas requi\u00e7\u00f5es de atualiza\u00e7\u00f5es.  package br.com.myapp;\n\nimport br.com.roove.synclite.sync.Synchronizer;\nimport br.com.myapp.models.Book;\n\nclass MyApplication extends android.app.Application {\n\n    @Override\n    public void onCreate() {\n        super.onCreate();\n\n        Synchronizer synchronizer = Synchronizer.getInstance();\n\n        synchronizer.registerModel(Book.class);\n\n        // Ou para registrar com um nome espec\u00edfico no serializer.\n        String serializerBookName =  books ;\n        synchronizer.registerModel(Book.class, serializerBookName);\n\n        synchronizer.start();\n    }\n\n}  Os modelos podem ser adicionados a qualquer momento para o sincronizador, mesmo depois que j\u00e1 foi iniciada a sincroniza\u00e7\u00e3o.", 
            "title": "Registrando entidades"
        }, 
        {
            "location": "/#download", 
            "text": "Download via Gradle:  compile 'br.com.roove.synclite:android:0.0.1'  Android SyncLite requer no m\u00ednimo Android 2.3.", 
            "title": "Download"
        }, 
        {
            "location": "/synchronizer/", 
            "text": "Segue a defini\u00e7\u00e3o e as possibilidades de customiza\u00e7\u00f5es do sincronizador.\n\n\nURL's\n\n\n\u00c9 necess\u00e1rio informar ao sincronizador as urls de pull e de push dos dados.\n\n\nSynchronizer synchronizer = Synchronizer.getInstance();\n\nString pullUrl = \nhttps://api.myapp.com/sync/pull\n\nString pushUrl = \nhttps://api.myapp.com/sync/push\n\n\nsynchronizer.setPullUrl(pullUrl);\nsynchronizer.setPushUrl(pushUrl);\n\n\n\n\nAs urls devem ser informadas antes de iniciar o sincronizador. \n\n\nPar\u00e2metros din\u00e2micos nas urls\n\n\nCaso a aplica\u00e7\u00e3o necessite informar par\u00e2metros nas urls de pull, ou push, pode ser informado um bloco que ser\u00e1 executado sempre que a url for montada para uso.\n\n\nSynchronizer synchronizer = Synchronizer.getInstance();\n\nPullParameters pullParameters = new PullParameters() {\n  @Override\n  public Map\nString, Object\n getParameters() {\n    Map\nString, Object\n params = new HashMap\n();\n    params.put(\nparam\n, \nvalue\n);\n    return params;\n  }\n};\n\nPushParameters pushParameters = new PushParameters() {\n  @Override\n  public Map\nString, Object\n getParameters() {\n    Map\nString, Object\n params = new HashMap\n();\n    params.put(\nparam\n, \nvalue\n);\n    return params;\n  }\n};\n\nsynchronizer.setPullParameters(pullParameters);\nsynchronizer.setPushParameters(pushParameters);\n\n\n\n\nAssim como as urls essas implementa\u00e7\u00f5es devem ser informadas antes de iniciar o sincronizador.\n\n\nHeaders din\u00e2micos nas requisi\u00e7\u00f5es\n\n\nCaso a aplica\u00e7\u00e3o necessite informar headers nas requisi\u00e7\u00f5es de pull, ou push, pode ser informado um bloco que ser\u00e1 executado sempre que a requisi\u00e7\u00e3o for ser executada.\n\n\nSynchronizer synchronizer = Synchronizer.getInstance();\n\nRequestHeaders requestHeaders = new RequestHeaders() {\n  @Override\n  public Map\nString, Object\n getHeaders() {\n    Map\nString, Object\n headers = new HashMap\n();\n    String headers = \nmock_token\n;\n    headers.put(\nAuthorization\n, \nBearer \n + token);\n    headers.put(\nX-Custom-Header\n, \nmonkey\n);\n    return headers;\n  }\n};\n\nsynchronizer.setRequestHeaders(requestHeaders);\n\n\n\n\nAssim como as urls essas implementa\u00e7\u00f5es devem ser informadas antes de iniciar o sincronizador.\n\n\nCapturando atualiza\u00e7\u00f5es\n\n\n\u00c9 poss\u00edvel monitorar o processo de atualiza\u00e7\u00e3o em dois n\u00edveis, sendo: Todos os registros e Resgistros de uma classe espec\u00edfica.\n\n\npackage br.com.myapp;\n\nimport android.util.Log;\n\nimport br.com.roove.synclite.observers.SyncObserver;\nimport br.com.roove.synclite.sync.Synchronizer;\nimport br.com.myapp.models.Book;\n\nclass MyApplication extends android.app.Application {\n\n    private static final String TAG = MyApplication.class.getCanonicalName();\n\n    @Override\n    public void onCreate() {\n        super.onCreate();\n\n        Synchronizer synchronizer = Synchronizer.getInstance();\n        synchronizer.registerModel(Book.class);\n\n        synchronizer.registerObserverSync(new SyncObserver() {\n            @Override\n            public void onFinishSync() {\n              Log.d(TAG, \nFinish sync\n);\n            }\n        });\n\n        synchronizer.registerObserverModelSync(Book.class, new SyncObserver() {\n            @Override\n            public void onFinishSync() {\n              Log.d(TAG, \nFinish sync for book\n);\n            }\n        });\n\n        synchronizer.start();\n    }\n\n}\n\n\n\n\nOs observadores podem ser adicionados a qualquer momento para o sincronizador, mesmo depois que j\u00e1 foi iniciada a sincroniza\u00e7\u00e3o.\n\n\nM\u00e9todos dispon\u00edveis do SyncObserver:\n\n\npublic void onFinishSync();\npublic void onFinishSync(int totalRecords);\npublic void onFinishSync(JSONObject response);", 
            "title": "Sincronizador"
        }, 
        {
            "location": "/synchronizer/#urls", 
            "text": "\u00c9 necess\u00e1rio informar ao sincronizador as urls de pull e de push dos dados.  Synchronizer synchronizer = Synchronizer.getInstance();\n\nString pullUrl =  https://api.myapp.com/sync/pull \nString pushUrl =  https://api.myapp.com/sync/push \n\nsynchronizer.setPullUrl(pullUrl);\nsynchronizer.setPushUrl(pushUrl);  As urls devem ser informadas antes de iniciar o sincronizador.", 
            "title": "URL's"
        }, 
        {
            "location": "/synchronizer/#parametros-dinamicos-nas-urls", 
            "text": "Caso a aplica\u00e7\u00e3o necessite informar par\u00e2metros nas urls de pull, ou push, pode ser informado um bloco que ser\u00e1 executado sempre que a url for montada para uso.  Synchronizer synchronizer = Synchronizer.getInstance();\n\nPullParameters pullParameters = new PullParameters() {\n  @Override\n  public Map String, Object  getParameters() {\n    Map String, Object  params = new HashMap ();\n    params.put( param ,  value );\n    return params;\n  }\n};\n\nPushParameters pushParameters = new PushParameters() {\n  @Override\n  public Map String, Object  getParameters() {\n    Map String, Object  params = new HashMap ();\n    params.put( param ,  value );\n    return params;\n  }\n};\n\nsynchronizer.setPullParameters(pullParameters);\nsynchronizer.setPushParameters(pushParameters);  Assim como as urls essas implementa\u00e7\u00f5es devem ser informadas antes de iniciar o sincronizador.", 
            "title": "Par\u00e2metros din\u00e2micos nas urls"
        }, 
        {
            "location": "/synchronizer/#headers-dinamicos-nas-requisicoes", 
            "text": "Caso a aplica\u00e7\u00e3o necessite informar headers nas requisi\u00e7\u00f5es de pull, ou push, pode ser informado um bloco que ser\u00e1 executado sempre que a requisi\u00e7\u00e3o for ser executada.  Synchronizer synchronizer = Synchronizer.getInstance();\n\nRequestHeaders requestHeaders = new RequestHeaders() {\n  @Override\n  public Map String, Object  getHeaders() {\n    Map String, Object  headers = new HashMap ();\n    String headers =  mock_token ;\n    headers.put( Authorization ,  Bearer   + token);\n    headers.put( X-Custom-Header ,  monkey );\n    return headers;\n  }\n};\n\nsynchronizer.setRequestHeaders(requestHeaders);  Assim como as urls essas implementa\u00e7\u00f5es devem ser informadas antes de iniciar o sincronizador.", 
            "title": "Headers din\u00e2micos nas requisi\u00e7\u00f5es"
        }, 
        {
            "location": "/synchronizer/#capturando-atualizacoes", 
            "text": "\u00c9 poss\u00edvel monitorar o processo de atualiza\u00e7\u00e3o em dois n\u00edveis, sendo: Todos os registros e Resgistros de uma classe espec\u00edfica.  package br.com.myapp;\n\nimport android.util.Log;\n\nimport br.com.roove.synclite.observers.SyncObserver;\nimport br.com.roove.synclite.sync.Synchronizer;\nimport br.com.myapp.models.Book;\n\nclass MyApplication extends android.app.Application {\n\n    private static final String TAG = MyApplication.class.getCanonicalName();\n\n    @Override\n    public void onCreate() {\n        super.onCreate();\n\n        Synchronizer synchronizer = Synchronizer.getInstance();\n        synchronizer.registerModel(Book.class);\n\n        synchronizer.registerObserverSync(new SyncObserver() {\n            @Override\n            public void onFinishSync() {\n              Log.d(TAG,  Finish sync );\n            }\n        });\n\n        synchronizer.registerObserverModelSync(Book.class, new SyncObserver() {\n            @Override\n            public void onFinishSync() {\n              Log.d(TAG,  Finish sync for book );\n            }\n        });\n\n        synchronizer.start();\n    }\n\n}  Os observadores podem ser adicionados a qualquer momento para o sincronizador, mesmo depois que j\u00e1 foi iniciada a sincroniza\u00e7\u00e3o.  M\u00e9todos dispon\u00edveis do SyncObserver:  public void onFinishSync();\npublic void onFinishSync(int totalRecords);\npublic void onFinishSync(JSONObject response);", 
            "title": "Capturando atualiza\u00e7\u00f5es"
        }, 
        {
            "location": "/api/", 
            "text": "Nesta p\u00e1gina ser\u00e1 a estrutura necess\u00e1ria dos servi\u00e7os para que a sincroniza\u00e7\u00e3o funcione corretamente.\n\n\nAndroid-to-Server (Push)\n\n\n#TODO\n\n\nServer-to-Android (Pull)\n\n\n#TODO", 
            "title": "API"
        }, 
        {
            "location": "/api/#android-to-server-push", 
            "text": "#TODO", 
            "title": "Android-to-Server (Push)"
        }, 
        {
            "location": "/api/#server-to-android-pull", 
            "text": "#TODO", 
            "title": "Server-to-Android (Pull)"
        }, 
        {
            "location": "/about/", 
            "text": "Licen\u00e7a\n\n\nCopyright 2013 Square, Inc.\n\nLicensed under the Apache License, Version 2.0 (the \nLicense\n);\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n   http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \nAS IS\n BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.", 
            "title": "Sobre"
        }, 
        {
            "location": "/about/#licenca", 
            "text": "Copyright 2013 Square, Inc.\n\nLicensed under the Apache License, Version 2.0 (the  License );\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n   http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an  AS IS  BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.", 
            "title": "Licen\u00e7a"
        }
    ]
}